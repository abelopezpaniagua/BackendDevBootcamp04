using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OutlookClientExercise
{
    public class MessagesMock
    {
        private List<Message> _mockMessages;
        private int _countMessages;

        private string _originEmail;
        private List<string> _destEmails;
        private List<string> _copyEmails;

        public MessagesMock(string originEmail, List<string> destEmails, List<string> copyEmails, int countMessages)
        {
            this._originEmail = originEmail;
            this._destEmails = destEmails;
            this._copyEmails = copyEmails;
            this._countMessages = countMessages;

            this._mockMessages = new List<Message>();

            GenerateMockMessages();
        }

        private void GenerateMockMessages()
        {
            var random = new Random();

            var randomOriginIp = $"{random.Next(1, 255)}.{random.Next(1, 255)}.{random.Next(1, 255)}.{random.Next(1, 255)}";

            for (int i = 0; i < this._countMessages; i++)
            {
                var countRandomMessages = random.Next(0, 4);
                var body = $"Random message generated by mock, number #{i + 1}";
                var subject = random.Next(0, 1) > 0 ? "Mock Message" : null;

                var message = new Message(
                    randomOriginIp, this._originEmail, 
                    this._destEmails.GetRange(random.Next(0, this._destEmails.Count - 1), countRandomMessages), 
                    body, 
                    DateTime.Now, 
                    subject, 
                    this._copyEmails.Count > 0 ? this._copyEmails.GetRange(random.Next(0, this._copyEmails.Count - 1), countRandomMessages) : null,
                    random.Next(0, 1) > 0);

                this._mockMessages.Add(message);
            }
        }

        public List<Message> GetMockMessages()
        {
            return _mockMessages;
        }
    }
}
